shiny::runApp()
shiny::runApp()
shiny::runApp()
df=tribble(
~Id, ~Cat, ~Type, ~Value,
1, "2019", "C", 147,
2, "2019", "Clojure", 1,
3, "2019", "D3", 14,
4, "2019", "F.", 2,
5, "2019", "Fortran", 2,
6, "2019", "Golang", 3,
7, "2019", "Hadoop", 309,
8, "2019", "Haskell", 6,
9, "2019", "Java", 168,
10, "2019", "Javascript", 13,
11, "2019", "Julia", 23,
12, "2019", "knime", 7,
13, "2019", "Lisp", 0,
14, "2019", "Matlab", 89,
15, "2019", "Minitab", 1,
16, "2019", "Python", 1128,
17, "2019", "R", 1017,
18, "2019", "Ruby", 9,
19, "2019", "SAS", 265,
20, "2019", "SQL", 821,
21, "2019", "Scala", 281,
22, "2019", "Spark", 130,
23, "2019", "Spss", 38,
24, "2019", "Stata", 13,
25, "2019", "Tableau", 300,
26, "2020", "Clojure", 0,
27, "2020", "D3", 7,
28, "2020", "F.", 2,
29, "2020", "Fortran", 8,
30, "2020", "Golang", 2,
31, "2020", "Hadoop", 149,
32, "2020", "Haskell", 0,
33, "2020", "Javascript", 25,
34, "2020", "Julia", 12,
35, "2020", "knime", 2,
36, "2020", "Lisp", 0,
37, "2020", "Matlab", 52,
38, "2020", "Minitab", 0,
39, "2020", "Python", 724,
40, "2020", "R", 575,
41, "2020", "Ruby", 1,
42, "2020", "SAS", 138,
43, "2020", "SQL", 473,
44, "2020", "Scala", 141,
45, "2020", "Spark", 184,
46, "2020", "Spss", 13,
47, "2020", "Stata", 9,
48, "2020", "Tableau", 141,
49, "2020", "C", 124,
50, "2020", "Java", 94,
51, "2021", "C", 89,
52, "2021", "Clojure", 0,
53, "2021", "D3", 4,
54, "2021", "F.", 0,
55, "2021", "Fortran", 2,
56, "2021", "Golang", 16,
57, "2021", "Hadoop", 389,
58, "2021", "Haskell", 5,
59, "2021", "Java", 421,
60, "2021", "Javascript", 110,
61, "2021", "Julia", 30,
62, "2021", "knime", 2,
63, "2021", "Lisp", 0,
64, "2021", "Matlab", 919,
65, "2021", "Minitab", 1,
66, "2021", "Python", 1554,
67, "2021", "R", 844,
68, "2021", "Ruby", 22,
69, "2021", "SAS", 1268,
70, "2021", "SQL", 1528,
71, "2021", "Scala", 248,
72, "2021", "Spark", 361,
73, "2021", "Spss", 28,
74, "2021", "Stata", 14,
75, "2021", "Tableau", 1291)
#ans 1 working fine
df %>% ggplot(aes(Cat))
df %>% ggplot(aes(x=Type, fill=Type, y=Value))+
geom_col()+
facet_grid(~Cat)
shiny::runApp()
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(tidyverse)
df = read.csv("ans1_dvp.csv")
library(lubridate)
df2 = read.csv("dvp_vis2_final.csv")
df2$Year = year(df2$listingDate)
df2 = df2[df2$Year < 2022,]
df3 = read.csv("ans3_dvp 2.csv")
df3$workType = str_to_title(df3$workType, locale = "en")
data3 = df3 %>%
group_by(workType,year) %>%
summarise(Count = n())
data3$year = as.factor(data3$year)
ui <- fluidPage(
column(width = 6,
wellPanel(
h2("Graph 1: Title here"),
fluidRow(
selectInput("SelectTypeP1",
"Select Type of tool",
unique(df$Type),
width = '100%'
)
),
br(),
fluidRow(
plotOutput("Plot1")
)
)
) ,
column(width = 6,
wellPanel(
h2("Graph 2: Title here"),
fluidRow(
sliderInput("SelectYearP2",
"Select Year Range",
min = min(df2$Year),
max = max(df2$Year),
value = c(min(df2$Year),max(df2$Year)),
width = '100%',
step = 1,
sep = ""
)
),
fluidRow(
leafletOutput("Plot2")
)
)
),
column(width = 12,
wellPanel(
fluidRow(
h2("Graph 3: Title here"),
selectInput("SelectTypeP3",
"Select Type",
unique(data3$workType),
unique(data3$workType),
multiple = T,
width = '100%'
)
),
fluidRow(
selectInput("SelectYearP3",
"Select Years",
unique(data3$year),
unique(data3$year),
multiple = T,
width = '100%'
)
),
fluidRow(
plotOutput("Plot3")
)
)
)
)
server <- function(input, output, session) {
output$Plot1 = renderPlot({
req(input$SelectTypeP1)
data1 = df %>%
filter(Type == input$SelectTypeP1)
data1$Cat = as.factor(data1$Cat)
ggplot(data=data1, aes(x=Cat, y=Value, fill = Cat)) +
geom_bar(stat="identity") +
theme_bw() +
theme(legend.position="none")+
geom_text(aes(label=Value), vjust=-0.3, size=5)+
ylab(paste("Tool:",input$SelectTypeP1))+
xlab("Year")
})
output$Plot2 = renderLeaflet({
req(input$SelectYearP2)
leaflet(data = df2[df2$Year >= input$SelectYearP2[1]
& df2$Year <= input$SelectYearP2[2]
,]) %>% addTiles() %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~as.character(state),
clusterOptions = markerClusterOptions()
)
})
output$Plot3 = renderPlot({
req(input$SelectTypeP3)
req(input$SelectYearP3)
data3 = data3 %>%
filter(workType %in% input$SelectTypeP3) %>%
filter(year %in% input$SelectYearP3)
ggplot(data=data3, aes(x=year, y=Count, fill = workType)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw() +
# theme(legend.position="none")+
# geom_text(aes(label=Count), vjust=-0.3, size=5)+
geom_text(aes(label=Count), vjust=0.5, hjust = -0.25, color="black",
position = position_dodge(0.9), size=5)+
scale_fill_brewer(palette="Paired")+
ylab(paste("Number of Jobs"))+
xlab("Year")+
coord_flip()
})
}
shinyApp(ui, server)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
library(maps)
library(leaflet)
library(dplyr)
library(shiny)
library(tidyverse)
df = read.csv("ans1_dvp.csv")
library(lubridate)
df2 = read.csv("dvp_vis2_final.csv")
df2$Year = year(df2$listingDate)
df2 = df2[df2$Year < 2022,]
df3 = read.csv("ans3_dvp 2.csv")
df3$workType = str_to_title(df3$workType, locale = "en")
data3 = df3 %>%
group_by(workType,year) %>%
summarise(Count = n())
data3$year = as.factor(data3$year)
ui <- fluidPage(
column(width = 6,
wellPanel(
h2("Graph 1: Title here"),
fluidRow(
selectInput("SelectTypeP1",
"Select Type",
unique(df$Type),
width = '100%'
)
),
br(),
fluidRow(
plotOutput("Plot1")
)
)
) ,
column(width = 6,
wellPanel(
h2("Graph 2: Title here"),
fluidRow(
sliderInput("SelectYearP2",
"Select Year Range",
min = min(df2$Year),
max = max(df2$Year),
value = c(min(df2$Year),max(df2$Year)),
width = '100%',
step = 1,
sep = ""
)
),
fluidRow(
leafletOutput("Plot2")
)
)
),
column(width = 12,
wellPanel(
fluidRow(
h2("Graph 3: Title here"),
selectInput("SelectTypeP3",
"Select Type",
unique(data3$workType),
unique(data3$workType),
multiple = T,
width = '100%'
)
),
fluidRow(
selectInput("SelectYearP3",
"Select Years",
unique(data3$year),
unique(data3$year),
multiple = T,
width = '100%'
)
),
fluidRow(
plotOutput("Plot3")
)
)
)
)
server <- function(input, output, session) {
output$Plot1 = renderPlot({
req(input$SelectTypeP1)
data1 = df %>%
filter(Type == input$SelectTypeP1)
data1$Cat = as.factor(data1$Cat)
ggplot(data=data1, aes(x=Cat, y=Value, fill = Cat)) +
geom_bar(stat="identity") +
theme_bw() +
theme(legend.position="none")+
geom_text(aes(label=Value), vjust=-0.3, size=5)+
ylab(paste("Tool:",input$SelectTypeP1))+
xlab("Year")
})
output$Plot2 = renderLeaflet({
req(input$SelectYearP2)
leaflet(data = df2[df2$Year >= input$SelectYearP2[1]
& df2$Year <= input$SelectYearP2[2]
,]) %>% addTiles() %>%
addMarkers(
~Longitude,
~Latitude,
popup = ~as.character(state),
clusterOptions = markerClusterOptions()
)
})
output$Plot3 = renderPlot({
req(input$SelectTypeP3)
req(input$SelectYearP3)
data3 = data3 %>%
filter(workType %in% input$SelectTypeP3) %>%
filter(year %in% input$SelectYearP3)
ggplot(data=data3, aes(x=year, y=Count, fill = workType)) +
geom_bar(stat="identity", position=position_dodge()) +
theme_bw() +
# theme(legend.position="none")+
# geom_text(aes(label=Count), vjust=-0.3, size=5)+
geom_text(aes(label=Count), vjust=0.5, hjust = -0.25, color="black",
position = position_dodge(0.9), size=5)+
scale_fill_brewer(palette="Paired")+
ylab(paste("Number of Jobs"))+
xlab("Year")+
coord_flip()
})
}
shinyApp(ui, server)
